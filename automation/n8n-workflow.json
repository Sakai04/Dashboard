{
  "meta": {
    "instanceId": "dashboard-github-notion-tracker"
  },
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "github-commits",
        "responseMode": "responseNode",
        "options": {
          "noResponseBody": true
        }
      },
      "id": "webhook-github",
      "name": "GitHub Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "github-commits"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.zen}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "filter-ping",
      "name": "Filter Ping Events",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.ref}}",
              "operation": "contains",
              "value2": "refs/heads/"
            }
          ]
        }
      },
      "id": "filter-branches",
      "name": "Filter Valid Branches",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 200]
    },
    {
      "parameters": {
        "functionCode": "const payload = $input.first().json;\nconst commits = payload.commits || [];\nconst repository = payload.repository;\nconst pusher = payload.pusher;\nconst ref = payload.ref;\n\nconst results = [];\n\nfor (const commit of commits) {\n  const commitData = {\n    title: commit.message.split('\\n')[0].substring(0, 100),\n    commit_hash: commit.id.substring(0, 8),\n    full_hash: commit.id,\n    author: commit.author.name,\n    email: commit.author.email,\n    date: commit.timestamp,\n    repository: repository.full_name,\n    branch: ref.replace('refs/heads/', ''),\n    url: commit.url,\n    files_changed: commit.added.length + commit.removed.length + commit.modified.length,\n    lines_added: 0,\n    lines_deleted: 0,\n    description: commit.message\n  };\n\n  const changedFiles = [...commit.added, ...commit.removed, ...commit.modified];\n  \n  let priorityScore = 0;\n  let categories = [];\n  let cicdStatus = 'Pending';\n  \n  const securityFiles = ['.env', 'requirements.txt', 'Dockerfile', 'docker-compose.yml'];\n  if (changedFiles.some(file => securityFiles.some(secFile => file.includes(secFile)))) {\n    priorityScore += 100;\n    categories.push('Security', 'Configuration');\n  }\n  \n  if (changedFiles.some(file => file.includes('Jenkinsfile') || file.includes('docker'))) {\n    priorityScore += 90;\n    categories.push('CI/CD');\n    cicdStatus = 'Building';\n  }\n  \n  if (changedFiles.some(file => file.includes('app/routers/') || file.includes('app/main.py'))) {\n    priorityScore += 80;\n    categories.push('API Development');\n  }\n  \n  if (changedFiles.some(file => file.includes('app/models/') || file.includes('database.py'))) {\n    priorityScore += 60;\n    categories.push('Database');\n  }\n  \n  if (changedFiles.some(file => file.includes('app/schemas/'))) {\n    priorityScore += 50;\n    categories.push('API Development');\n  }\n  \n  if (changedFiles.some(file => file.includes('app/crud/'))) {\n    priorityScore += 40;\n    categories.push('Database');\n  }\n  \n  if (changedFiles.some(file => file.includes('README.md') || file.includes('docs/'))) {\n    priorityScore += 10;\n    categories.push('Documentation');\n  }\n  \n  if (changedFiles.some(file => file.includes('test') || file.includes('spec'))) {\n    priorityScore += 30;\n    categories.push('Testing');\n  }\n  \n  const message = commit.message.toLowerCase();\n  const highPriorityKeywords = ['fix', 'security', 'urgent', 'hotfix', 'critical', 'bug'];\n  const featureKeywords = ['feat', 'feature', 'add', 'new'];\n  const refactorKeywords = ['refactor', 'refactoring', 'cleanup', 'improve'];\n  \n  if (highPriorityKeywords.some(keyword => message.includes(keyword))) {\n    priorityScore += 70;\n    categories.push('Bug Fix');\n  } else if (featureKeywords.some(keyword => message.includes(keyword))) {\n    priorityScore += 50;\n    categories.push('Feature');\n  } else if (refactorKeywords.some(keyword => message.includes(keyword))) {\n    priorityScore += 30;\n    categories.push('Refactoring');\n  }\n  \n  let priority;\n  if (priorityScore >= 100) {\n    priority = 'Critical';\n  } else if (priorityScore >= 70) {\n    priority = 'High';\n  } else if (priorityScore >= 40) {\n    priority = 'Medium';\n  } else {\n    priority = 'Low';\n  }\n  \n  let status;\n  if (priority === 'Critical') {\n    status = 'Review Required';\n  } else if (changedFiles.some(file => file.includes('Jenkinsfile'))) {\n    status = 'Pending';\n  } else {\n    status = 'Completed';\n  }\n  \n  categories = [...new Set(categories)];\n  if (categories.length === 0) {\n    categories = ['General'];\n  }\n  \n  const finalData = {\n    ...commitData,\n    priority: priority,\n    status: status,\n    categories: categories,\n    priority_score: priorityScore,\n    cicd_status: cicdStatus,\n    changed_files: changedFiles,\n    security_related: securityFiles.some(secFile => \n      changedFiles.some(file => file.includes(secFile))\n    ),\n    api_related: changedFiles.some(file => \n      file.includes('app/routers/') || file.includes('app/main.py')\n    ),\n    database_related: changedFiles.some(file => \n      file.includes('app/models/') || file.includes('database.py')\n    )\n  };\n  \n  results.push(finalData);\n}\n\nreturn results.map(item => ({ json: item }));"
      },
      "id": "analyze-commits",
      "name": "Analyze Dashboard Commits",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "create",
        "databaseId": "={{$env.NOTION_DATABASE_ID}}",
        "title": "={{$json.title}}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Commit Hash",
              "textValue": "={{$json.commit_hash}}"
            },
            {
              "key": "Author",
              "textValue": "={{$json.author}}"
            },
            {
              "key": "Date",
              "dateValue": "={{$json.date}}"
            },
            {
              "key": "Repository",
              "textValue": "={{$json.repository}}"
            },
            {
              "key": "Branch",
              "textValue": "={{$json.branch}}"
            },
            {
              "key": "Status",
              "selectValue": "={{$json.status}}"
            },
            {
              "key": "Priority",
              "selectValue": "={{$json.priority}}"
            },
            {
              "key": "Category",
              "multiSelectValue": "={{$json.categories}}"
            },
            {
              "key": "Files Changed",
              "numberValue": "={{$json.files_changed}}"
            },
            {
              "key": "Description",
              "textValue": "={{$json.description}}"
            },
            {
              "key": "URL",
              "urlValue": "={{$json.url}}"
            },
            {
              "key": "CI/CD Status",
              "selectValue": "={{$json.cicd_status}}"
            }
          ]
        }
      },
      "id": "create-notion-page",
      "name": "Create Notion Page",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [1120, 200],
      "credentials": {
        "notionApi": {
          "id": "dashboard-notion",
          "name": "Dashboard Notion"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.security_related}}",
              "value2": true
            }
          ]
        }
      },
      "id": "check-security",
      "name": "Check Security Changes",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"status\": \"success\",\n  \"message\": \"Webhook processed successfully\",\n  \"processed_commits\": \"={{$('Analyze Dashboard Commits').all().length}}\",\n  \"timestamp\": \"={{new Date().toISOString()}}\"\n}"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 500]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "Ping received successfully"
      },
      "id": "ping-response",
      "name": "Ping Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [460, 500]
    }
  ],
  "connections": {
    "GitHub Webhook": {
      "main": [
        [
          {
            "node": "Filter Ping Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Ping Events": {
      "main": [
        [
          {
            "node": "Filter Valid Branches",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ping Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Valid Branches": {
      "main": [
        [
          {
            "node": "Analyze Dashboard Commits",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Dashboard Commits": {
      "main": [
        [
          {
            "node": "Create Notion Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Notion Page": {
      "main": [
        [
          {
            "node": "Check Security Changes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "timezone": "Asia/Seoul",
    "saveManualExecutions": true,
    "callerPolicy": "workflowOwner",
    "executionOrder": "v1"
  },
  "versionId": "1",
  "id": "dashboard-github-notion-tracker",
  "name": "Dashboard GitHub to Notion Tracker",
  "tags": [
    {
      "createdAt": "2024-01-15T00:00:00.000Z",
      "updatedAt": "2024-01-15T00:00:00.000Z",
      "id": "dashboard",
      "name": "Dashboard Project"
    },
    {
      "createdAt": "2024-01-15T00:00:00.000Z",
      "updatedAt": "2024-01-15T00:00:00.000Z",
      "id": "automation",
      "name": "Automation"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T00:00:00.000Z",
  "createdAt": "2024-01-15T00:00:00.000Z"
}